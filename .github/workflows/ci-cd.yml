name: CI-CD

on:
  push:
    branches:
      - "*"

env:
  DOCKER_IMAGE: oanhnn/php

jobs:
  build:
    name: Build, test and publish image for tag ${{ matrix.php }}-${{ matrix.variant }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version
        id: vars
        run: |
          # Get version from branch name
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          echo $VERSION
          VERSION=7.4-fpm-alpine
          # Set step output
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=created::$(date --utc --iso-8601=seconds | sed 's/+00.00/Z/g')"

      - name: Build image
        run: |
          docker build --pull --cache-from $DOCKER_IMAGE:${{ steps.vars.outputs.version }} \
                       --label "org.opencontainers.image.title='The PHP Docker Image'" \
                       --label "org.opencontainers.image.authors=oanhnn" \
                       --label "org.opencontainers.image.licenses=MIT" \
                       --label "org.opencontainers.image.version=${{ steps.vars.outputs.version }}" \
                       --label "org.opencontainers.image.created=${{ steps.vars.outputs.created }}" \
                       --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
                       --label "org.opencontainers.image.revision=${{ github.sha }}" \
                       --build-arg VERSION=${{ steps.vars.outputs.version }} \
                       --tag $DOCKER_IMAGE:test .
      - name: Test php version
        run: |
          docker run --rm $DOCKER_IMAGE:test php -v
          docker run --rm $DOCKER_IMAGE:test php -m

      # - name: Publish image to Docker Hub
      #   if: github.event_name != 'pull_request'
      #   run: |
      #     echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      #     docker tag $DOCKER_IMAGE:test $DOCKER_IMAGE:${{ steps.vars.outputs.version }}
      #     docker push $DOCKER_IMAGE:${{ steps.vars.outputs.version }}
